<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sorting</name>
    </assembly>
    <members>
        <member name="T:Sorting.Bicycle">
            <summary>
            An example class to test the various algorithms on
            </summary>
        </member>
        <member name="M:Sorting.Bicycle.CompareTo(Sorting.Bicycle)">
            <summary>
            Compare bicycles based on their weight
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.Bicycle.CompareTo(System.Object)">
            <summary>
            Cast obj to bicycle and call the generic CompareTo method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.BinaryAddition.Add(System.Int32[],System.Int32[])">
            <summary>
            Assumption that each int within both arrays is either 0 or 1 to simulate adding two numbers stored as bits
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Sorting.BinarySearch.Search``1(``0[],``0)">
            <summary>
            Performs binary search on an array, calls helper function <see cref="M:Sorting.BinarySearch.Search``1(``0[],``0,System.Int32,System.Int32)"/>
            </summary>
            <typeparam name="T">Must implement <see cref="T:System.IComparable"/> and <see cref="T:System.IComparable`1"/></typeparam>
            <param name="array">The array to search in</param>
            <param name="item">The item to search for</param>
            <returns>The index of the item searched for</returns>
        </member>
        <member name="M:Sorting.BinarySearch.Search``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Returns the index of the item in the array between start (inclusive) and finish (exclusive).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <param name="start">inclusive</param>
            <param name="finish">exclusive</param>
            <returns>The index of the item searched for</returns>
        </member>
        <member name="T:Sorting.BubbleSort">
            <summary>
            Static class housing bubble sort methods
            </summary>
        </member>
        <member name="M:Sorting.BubbleSort.Sort``1(``0[])">
            <summary>
            Sort an array of any type implementing <see cref="T:System.IComparable"/> and <see cref="T:System.IComparable`1"/> using the bubble sort algorithm
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:Sorting.MaxContiguousSubarray.DynamicProgramming(System.Int32[])">
            <summary>
            Returns the value of the maximum contiguous subarray using dynamic programming
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.MaxContiguousSubarray.BruteForce(System.Int32[])">
            <summary>
            Brute forces the largest rise between two numbers in the array by checking each pair
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.MaxContiguousSubarray.DivideAndConquer(System.Int32[])">
            <summary>
            Returns the value of the maximum contiguous subarray within the passed array combined with
            its start index (inclusive) and end index (inclusive) using divide and conquer
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.MergeSort.Sort``1(``0[])">
            <summary>
            Generic merge sort for an array of any type that implements IComparable{T}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Sorting.MergeSort.InArraySort(System.Int32[])">
            <summary>
            Sorts an integer array using the merge sort algorithm
            Calls helper function <see cref="M:Sorting.MergeSort.InArraySort(System.Int32[],System.Int32,System.Int32)"/>
            </summary>
            <param name="ints"></param>
        </member>
    </members>
</doc>
